// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc1
// source: subGenProto.proto

package subGenProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubtitleGeneratorClient is the client API for SubtitleGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtitleGeneratorClient interface {
	Generate(ctx context.Context, in *InputVideo, opts ...grpc.CallOption) (*OutputVideo, error)
}

type subtitleGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtitleGeneratorClient(cc grpc.ClientConnInterface) SubtitleGeneratorClient {
	return &subtitleGeneratorClient{cc}
}

func (c *subtitleGeneratorClient) Generate(ctx context.Context, in *InputVideo, opts ...grpc.CallOption) (*OutputVideo, error) {
	out := new(OutputVideo)
	err := c.cc.Invoke(ctx, "/subGenProto.SubtitleGenerator/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtitleGeneratorServer is the server API for SubtitleGenerator service.
// All implementations must embed UnimplementedSubtitleGeneratorServer
// for forward compatibility
type SubtitleGeneratorServer interface {
	Generate(context.Context, *InputVideo) (*OutputVideo, error)
	mustEmbedUnimplementedSubtitleGeneratorServer()
}

// UnimplementedSubtitleGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedSubtitleGeneratorServer struct {
}

func (UnimplementedSubtitleGeneratorServer) Generate(context.Context, *InputVideo) (*OutputVideo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedSubtitleGeneratorServer) mustEmbedUnimplementedSubtitleGeneratorServer() {}

// UnsafeSubtitleGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtitleGeneratorServer will
// result in compilation errors.
type UnsafeSubtitleGeneratorServer interface {
	mustEmbedUnimplementedSubtitleGeneratorServer()
}

func RegisterSubtitleGeneratorServer(s grpc.ServiceRegistrar, srv SubtitleGeneratorServer) {
	s.RegisterService(&SubtitleGenerator_ServiceDesc, srv)
}

func _SubtitleGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subGenProto.SubtitleGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleGeneratorServer).Generate(ctx, req.(*InputVideo))
	}
	return interceptor(ctx, in, info, handler)
}

// SubtitleGenerator_ServiceDesc is the grpc.ServiceDesc for SubtitleGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubtitleGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subGenProto.SubtitleGenerator",
	HandlerType: (*SubtitleGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _SubtitleGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subGenProto.proto",
}
