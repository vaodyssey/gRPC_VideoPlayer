@page "/"
@using gRPC_FE.Client
@using gRPC_FE.Constants
@using gRPC_FE.Components.Elements
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>
@if (IsLoaded == true)
{
    <div id="trailer" class="section d-flex justify-content-center embed-responsive embed-responsive-16by9">
        <video @ref="@_videoPlayer"
               class="embed-responsive-item"
               src="@_base64Video"
               type="@_mediaType"
               id="video-player"
               controls autoplay>
            Your browser does not support the video tag.
        </video>
    </div>
}
else
{
    <LoadingAnim></LoadingAnim>
}

<script>
    window.getVideoCurrentTime = function() {
        var videoElement = document.getElementById("video-player")
        var time = videoElement.currentTime
        console.log("Current video time: "+time)
        return time;
    };
</script>

@code {
    private VideoClient _videoClient = new VideoClient();
    private bool _isNextBufferLoadTriggered = false;
    private ElementReference _videoPlayer;
    private byte[] _buffer;
    private byte[] _inputVideoBytes;
    private string _base64Video = "";
    private bool IsLoaded { get; set; } = false;
    private string _mediaType => "video/mp4";
    private TimeSpan _lastChunkEndTime = TimeSpan.Zero;
    private TimeSpan _chunkDuration = TimeSpan.FromSeconds(VideoInfo.CHUNK_DURATION_IN_SECONDS);

    protected override async void OnInitialized()
    {
        await LoadVideoAsByteArray();
        await InitializeFirstVideoChunk();
        await ConvertByteArrayToMP4();
        await InvokeAsync(() =>
        {
            IsLoaded = true;
            StateHasChanged();
        });
    }

    private Task LoadVideoAsByteArray()
    {
        return Task.Run(() =>
        {
            _inputVideoBytes = File.ReadAllBytes(Paths.TEMP_VIDEO_INPUT);
        });
    }
    private async Task InitializeFirstVideoChunk()
    {
        _buffer = await _videoClient.GetVideoBuffer(new Requests.VideoBufferRequest()
        {
            StartTime = 100,
            Duration = 120,
            VideoBytes = _inputVideoBytes
        });
    }
    private Task ConvertByteArrayToMP4()
    {
        return Task.Run(() =>
        {
            _base64Video = $"data:{_mediaType};base64,{Convert.ToBase64String(_buffer)}";
        });
    }
    
}