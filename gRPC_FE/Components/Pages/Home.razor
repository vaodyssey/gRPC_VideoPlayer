@page "/"
@using gRPC_FE.Client
@using gRPC_FE.Constants
@using gRPC_FE.Components.Elements 
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime JS 

<PageTitle>Home</PageTitle>
@if (IsLoaded == true)
{
    <div id="trailer" class="section d-flex justify-content-center embed-responsive embed-responsive-16by9">
        <video @ref="@_videoPlayer" 
               class="embed-responsive-item" 
                src="@_base64Video"
                type="@_mediaType"
               id="video-player"
               controls autoplay>          
            Your browser does not support the video tag.
        </video>
    </div>    
}
else
{
    <LoadingAnim></LoadingAnim>
}

<script>
    window.getVideoCurrentTime = function() {
        var videoElement = document.getElementById("video-player")
        var time = videoElement.currentTime
        console.log("Current video time: "+time)
        return time;
    };
</script>

@code {
    private VideoClient _videoClient = new VideoClient();
    private bool _isNextBufferLoadTriggered = false;
    private ElementReference _videoPlayer;
    private byte[] _buffer;
    private string _base64Video = "";
    private bool IsLoaded { get; set; } = false;
    private string _mediaType => "video/mp4";
    private TimeSpan _lastChunkEndTime = TimeSpan.Zero;
    private TimeSpan _chunkDuration = TimeSpan.FromSeconds(VideoInfo.CHUNK_DURATION_IN_SECONDS);

    protected override async void OnInitialized()
    {
        await InitializeFirstVideoChunk();
        await ConvertByteArrayToMP4();
        await InvokeAsync(() =>
        {
            IsLoaded = true;
            StateHasChanged();
        });
    }

    private async Task InitializeFirstVideoChunk()
    {
        _buffer = await _videoClient.GetVideoBuffer(new Requests.VideoBufferRequest()
        {
            StartTime = 60,
            Duration = VideoInfo.CHUNK_DURATION_IN_SECONDS
        });
    }
    private Task ConvertByteArrayToMP4()
    {
        return Task.Run(() =>
        {
            _base64Video = $"data:{_mediaType};base64,{Convert.ToBase64String(_buffer)}";
        });
    }
    
    /// <summary>
    /// TODO: Add video buffering (e.g. loads the next 15-second video chunk after the first chunk finishes.
    /// </summary>
    //private async void OnVideoTimeChanged()
    //{
    //    var currentTime = await JS.InvokeAsync<double>("getVideoCurrentTime");
    //    var currentTimeSpan = TimeSpan.FromSeconds(currentTime);
    //    System.Diagnostics.Debug.WriteLine("C# - Current time span: " + currentTimeSpan);

    //    //Check if the current playback time has passed the end time of the last loaded chunk
    //    if (currentTimeSpan >= _lastChunkEndTime && !_isNextBufferLoadTriggered)
    //    {
    //        // Load the next video chunk
    //        _isNextBufferLoadTriggered = true;
    //        await GetNextVideoChunk();
    //        await InvokeAsync(() =>
    //        {
    //            IsLoaded = false; 
    //            IsLoaded = true; 
    //            StateHasChanged();
    //        });
    //    }
    //}
    //private async Task GetNextVideoChunk()
    //{
    //    TimeSpan nextChunkStartTime = _lastChunkEndTime;
    //    TimeSpan nextChunkEndTime = nextChunkStartTime + _chunkDuration;
    //    int startTimeInt = (int)nextChunkStartTime.TotalSeconds;
    //    var nextChunkData = await _videoClient.GetVideoBuffer(new Requests.VideoBufferRequest()
    //    {
    //        StartTime = startTimeInt+ VideoInfo.CHUNK_DURATION_IN_SECONDS,
    //        Duration = VideoInfo.CHUNK_DURATION_IN_SECONDS
    //    });
    //    // Append the next chunk to the existing video source
    //    await AppendVideoChunk(nextChunkData);

    //    // Update the end time of the last loaded chunk
    //    _lastChunkEndTime = nextChunkEndTime;
    //    _isNextBufferLoadTriggered = false;
    //}
    //private Task AppendVideoChunk(byte[] chunkData)
    //{
    //    return Task.Run(() =>
    //    {
    //        string base64Chunk = Convert.ToBase64String(chunkData);
    //        _base64Video += base64Chunk;
    //    });
    //}
}