@page "/"
@using gRPC_FE.Client
@using gRPC_FE.Constants
@using gRPC_FE.Components.Elements
@using gRPC_FE.Utils
@using gRPC_FE.Requests
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>
@if (!_isVideoLoaded)
{
    <article class="content">
        <div class="container">
            <div class="row">
                <p class="h2">Upload</p>
                <p>Choose a video, then set the minimum and maximum time to begin.</p>
            </div>
            <div class="row">
                <form @onsubmit="HandleRequest" class="needs-validation" novalidate>                    
                    <div class="input-group mb-3">
                        <InputFile class="form-control" id="inputFile" OnChange="OnInputFileChange" aria-describedby="uploadButton" required />
                        <button class="btn btn-primary" type="submit" id="uploadButton" disabled="@_isUploadDisabled">
                            <span class="oi oi-cloud-upload" aria-hidden="true"></span> Upload Selected File
                        </button>
                    </div>
                    <div class="invalid-feedback">
                        Please select a file to upload.
                    </div>
                </form>
            </div>

            <div class="row">

                <EditForm EditContext="@EC">
                    <DataAnnotationsValidator />
                    <div class="form-row">
                        <div class="form-group col-lg-2">

                            <label for="timeInput">Start (hh:mm:ss)</label>
                            <InputText id="timeInput" class="form-control" @bind-Value="@_videoRequest.StartTime"
                                       placeholder="00:00:00" />
                            <ValidationMessage For="@(()=>_videoRequest.StartTime)" />

                        </div>
                        <div class="form-group  col-lg-2">

                            <label for="timeInput">End (hh:mm:ss)</label>
                            <InputText id="timeInput" class="form-control" @bind-Value="@_videoRequest.EndTime"
                                       placeholder="00:00:00" />
                            <ValidationMessage For="@(()=>_videoRequest.EndTime)" />

                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </article>
}
else if (_isVideoLoaded && _isOutputVideoAvailable)
{
    <div id="trailer" class="section d-flex justify-content-center embed-responsive embed-responsive-16by9">
        <video class="embed-responsive-item"
               src="@_base64Video"
               type="@_mediaType"
               id="video-player"
               controls autoplay>
            Your browser does not support the video tag.
        </video>
    </div>
}
else if (_isVideoLoaded && !_isOutputVideoAvailable)
{
    <LoadingAnim></LoadingAnim>
}

@code {
    private VideoClient _videoClient;
    private bool _isUploadDisabled;
    private bool _isVideoLoaded;
    private byte[] _outputVideoBytes;    
    private EditContext EC;
    private VideoRequest _videoRequest;
    private string _base64Video;
    private bool _isOutputVideoAvailable;
    private string _mediaType;

    protected override void OnInitialized()
    {
        InitializeFields();

    }
    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _videoRequest.VideoBytes = await FileConvertUtils.ConvertIBrowserFileToByteArray(e.GetMultipleFiles()[0]);
        await InvokeAsync(() =>
        {
            _isUploadDisabled = false;
            StateHasChanged();
        });
    }
    private async void HandleRequest()
    {
        var inputValid = await IsInputValid();
        if (!inputValid) return;
        await InvokeAsync(() =>
        {
            _isVideoLoaded = true;
            StateHasChanged();
        });
        await GetSubtitledVideo();
        _base64Video = await FileConvertUtils.ConvertByteArrayToBase64(_mediaType, _outputVideoBytes);
        await InvokeAsync(() =>
        {
            _isOutputVideoAvailable = true;
            StateHasChanged();
        });
    }
    private async Task<bool> IsInputValid()
    {
        bool res = true;
        await InvokeAsync(() =>
        {
            if (!EC.Validate()) res = false;

        });
        return res;
    }

    private async Task GetSubtitledVideo()
    {
        _outputVideoBytes = await _videoClient.GetVideoBuffer(_videoRequest);
    }

    private void InitializeFields()
    {
        _videoClient = new VideoClient();
        _isUploadDisabled = true;
        _isVideoLoaded = false;
        _outputVideoBytes = new byte[] { };
        
        _videoRequest = new VideoRequest();
        EC = new EditContext(_videoRequest);
        _base64Video = "";
        _isOutputVideoAvailable = false;
        _mediaType = "video/mp4";
    }
}
